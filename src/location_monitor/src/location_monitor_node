#!/usr/bin/env python
import math
import rospy
from nav_msgs.msg import Odometry
from location_monitor.msg import LandmarkDistance

def distance (x1, y1, x2, y2):
    x = x1 - x2
    y = y1 - y2
    return math.sqrt(x*x + y*y)

class LandmarkMonitor(object):
    def __init__(self, pub, landmarks):
        self._pub = pub
        self._landmarks = landmarks

    def callback(self, msg):
        x = msg.pose.pose.position.x
        y = msg.pose.pose.position.y
        closest_name = None
        closest_dist = None

        for l_name, l_x, l_y in self._landmarks:
            dist = distance(x, y, l_x, l_y)
            if closest_dist is None or dist < closest_dist:
                closest_dist = dist
                closest_name = l_name
        ld = LandmarkDistance()
        ld.name = closest_name
        ld.distance = closest_dist
        self._pub.publish(ld)

def main():
    rospy.init_node('location_monitor')
    landmarks = []
    landmarks.append(("cube", 0.31, -0.99))
    landmarks.append(("dumpster", 0.11, -2.42))
    landmarks.append(("cylinder", -1.14, -2.88))
    landmarks.append(("barrier", -2.59, -0.83))
    landmarks.append(("bookshelf", 0.09, 0.53))

    pub = rospy.Publisher('closest_landmark', LandmarkDistance, queue_size=10)

    monitor = LandmarkMonitor(pub, landmarks)

    rospy.Subscriber('/odom', Odometry, monitor.callback)
    rospy.spin()

if __name__ == '__main__':
    main()